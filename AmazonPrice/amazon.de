# coding=utf-8
from concurrent import futures
import urllib2
import datetime
import time
import requests
from lxml import html
import urllib,urllib2,httplib,cookielib,os,sys
from bs4 import BeautifulSoup
import lxml.html
import socket, traceback

def udp_send(ID):
	host = '' # Bind to all interfaces
	port = 1234
	print "python UDP multi case server test"
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
	s.bind((host, port))
	ip = sys.argv[1]
	port = int(sys.argv[2])
	for i in range(1,2):
		try:
			#s.sendto(ID, ('133.130.106.179', 2345))
			#message, address = s.recvfrom(1234)
			#print "Got data from", address,":",message
			#s.sendto(ID, ('23.234.223.143', 19121)) 
			s.sendto(ID, (ip, port))
		except (KeyboardInterrupt, SystemExit):
			raise
		except:
			traceback.print_exc()
	return


def get_page(opener,url,data={}):
    headers = {'Connection': 'keep-alive',
        'Adf-Ads-Page-Id': '2',
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',
        'Adf-Rich-Message': 'true',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Accept-Encoding': 'gzip, deflate'
        }

    headers = {'User-Agent': "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; "
            + ".NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; "
            + "InfoPath.2; .NET4.0E)"}
    #print data;
    postdata=urllib.urlencode(data)
    if postdata:
        request=urllib2.Request(url,postdata,headers=headers)
    else:
        request=urllib2.Request(url,headers=headers)
    f = opener.open(request)
    content = f.read()
    #log(content,url);
    return content

def write(info):
	f=file("hello.txt","a+")
	f.write(info)
	f.close()
	

ASIN = sys.argv[3]
URLS = ['http://www.amazon.de/dp/'+ ASIN +'?m=A3JWKAKR8XB7XF','http://www.amazon.de/dp/'+ ASIN +'?m=A3JWKAKR8XB7XF'] 
num = 1
def load_url(url, timeout, ASIN):
	XPATH_SELECTOR = '//span[@id="priceblock_ourprice"]'
	SLEEP_INTERVAL = 1
	cookiejar=cookielib.CookieJar()
	cj=urllib2.HTTPCookieProcessor(cookiejar)
	opener=urllib2.build_opener(cj)
	price = get_page(opener,url)
	if "priceblock_ourprice" in price:	
		tree = html.fromstring(price)
		price1 = float(tree.xpath(XPATH_SELECTOR)[0].text[3:].replace(',','.'))
		print datetime.datetime.now(),ASIN,price1
		amdate = datetime.datetime.now()
		info = str(amdate) +"	"+ str(price1) +"	"+ ASIN +"\n"
		if (price1 < 40):
			if (num > 20):
				udp_send(ASIN)
				global num
				num = 1
				write(info)
			else:
				return
		else:
			return	
	else:
		print datetime.datetime.now(),ASIN,"NOTHING"
while True: 
	with futures.ThreadPoolExecutor(max_workers=1) as executor:
	    num += 1
	    future_to_url = dict((executor.submit(load_url, url, 60, ASIN), url)
				 for url in URLS)
